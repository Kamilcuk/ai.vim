#!/usr/bin/env python3

import json
from dataclasses import dataclass
from pathlib import Path

from jinja2 import StrictUndefined, Template


@dataclass
class Symbol:
    """My short representation of symbol"""

    name: str
    desc: str
    # type
    view: str
    orig: dict

    @classmethod
    def mk(cls, i):
        return cls(
            name=i["name"],
            desc=i.get("desc", ""),
            view=i["extends"]["view"],
            orig=i,
        )


class Doc:
    """Load JSON generated by lua-lanaguage-server"""

    def __init__(self, path: Path):
        with path.open() as f:
            self.data = json.load(f)
        self.name_to_data = {x["name"]: x for x in self.data}

    def find(self, x: str):
        """Find annotation of a symbol name"""
        return self.name_to_data[x]

    def commands(self):
        return sorted(
            (Symbol.mk(i) for i in self.find("Commands")["fields"]),
            key=lambda x: x.name,
        )

    def configs(self):
        return sorted(
            (Symbol.mk(i) for i in self.find("Config")["fields"]), key=lambda x: x.name
        )


if __name__ == "__main__":
    # From annotation generated by lua-language-server
    # generate README.md from jinja2 template.
    doc = Doc(Path("_build/doc.json"))
    with Path("README.jinja.md").open() as f:
        t = Template(
            f.read(),
            undefined=StrictUndefined,
            lstrip_blocks=True,
            trim_blocks=True,
        )
    #
    configs = doc.configs()
    assert len(configs) > 5
    for c in configs:
        # prepend configs with g: in front
        c.name = f"g:kai_{c.name}"
    #
    commands = doc.commands()
    assert len(commands) > 5
    for c in commands:
        # Take the first line from description as as the name if it contains a `:`.
        maybename = c.desc.splitlines()[0].strip()
        if maybename.startswith(":") and False:
            c.name = f"{maybename.lstrip(':')}"
            c.desc = "\n".join(c.desc.splitlines()[1:]).strip()
        # Fix newlines. Add a : in front.
        # c.desc = "\n".join(f"     {x}" for x in c.desc.splitlines())
    # Render temlpate and write it.
    res = t.render(
        configs=configs,
        commands=commands,
    )
    with Path("README.md").open("w") as f:
        f.write(res)
    print(
        f"Created README.md with {len(res.splitlines())} lines from {len(configs)} configs and {len(commands)} commands."
    )
